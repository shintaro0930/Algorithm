package m01;

//*TA 本多さん
/* 
 * class Sample1
 *   Java のプログラムのごく簡単な例です。
 *   作業をしながら理解をするために、コメント中に簡単な穴埋めや
 *   書き換えの指示がありますので、それに従ってください。
 */

// Java のプログラムはクラス（class) という単位から構成されます。
// しばらくは、「プログラム全体に名前を付けてひとまとまりで
// 宣言する」程度に思っておけば良いでしょう。

public class Sample1 {
	// Sample1 というクラスの中身です。
	// C言語で言えば、大域変数に相当する変数や、関数宣言
	// を並べて書くことができますが、まずは C言語の main関数
	// に相当するもの（Java では main メソッドと呼ばれる）
	// だけのプログラムを考えることにします。
	
	public static void main(String args[]) {
		//  main メソッドは必ず引数を持っています。引数の型は
		//  上に示した通り、「String 型の配列」です。
		//  String は「文字列」という意味を持っていますが、
		//  C言語とはだいぶ扱いが違います。その詳細は
		//  しばらくしてから学びます。今はまだこの引数を
		//  使いませんので、理解は不要です。
		
		// 	変数の宣言の仕方は C と同じです。
		//  int型変数の宣言の例です。
		int n, count, noUse;
		
		//  基本的なデータ型として、 int, double などはCと共通です。
		//  整数を表す型は、int の他に byte, short, long などがありますが、
		//  ここでは練習しません。

		// 上にならって、 int 型の変数 k と sum を宣言してください。
		// (下の「記入コード（１）」のコメントの下に書いてください。
		//  以下でも同様の要領です。）
		
		/* 記入コード（１）*/
		int k, sum;
		
		// 変数への代入の仕方や、式のなかでの使い方なども C と変わりません。
		// 使える演算子もほとんど C と同じです。
		n = 1;
		count = 0;
		while (n < 10) {
			n = n * 2;
			count++;
		}
		
		// 結果の出力には、C では printf 関数をつかいましたが、
		// Java ではSystem.out.println というメソッドを
		// 使います。 書式に相当するものが、Cとは違った考え方になります。
		// 二重引用符でくくられた文字列はそのまま出力されます。
		// 変数（一般には式）の値は標準的な方法で文字列に変換されます。
		// + は、文字列の連結を表す演算子です。
		// 実行して結果を確認してください。
	
	// B提出のコメントでは、なぜその出力結果が得られたのかを具体的に説明してください。
		//* （この文章を削除して説明すること。ただし、複数行に亘って説明する場合は適宜下の行に//*を追加して記述すること）
		System.out.println("n = " + n + ", count = " + count);
		
		// 1 から n までの整数の和を変数 sum に代入するための for 文を記入してください。
		// for 文の制御変数には k を用いてください。
		
		/* 記入コード（２）*/
		sum = 0;
		for(k = 1; k <= n; k++) {
			sum += k;
		}
		
		// sum の値と、k の値を上と同じような形式で（sum = **, k = ** のように）
		// 結果を出力する文を記入してください。
		
		/* 記入コード（３）*/
		System.out.println("sum = " + sum + ", k = " + k);
		
		// C との大きな違いは、論理値が int 型ではなく、専用の boolean 型として表されることです。
		// boolean 型の値は、true と false の2通りです。
		
		boolean b1, b2, b3;
		b1 = true;
		b2 = (n == 0);
		b3 = (count > 0);
		
    // B提出のコメントでは、b1、b2、b3の出力値がなぜそうなるかを説明してください。
		//* b1はtrueが代入されているので単純に"true"が代入される。
		//* b2は「nが0の場合」に"true"を代入するということだが、現在nには16が入っているので"false"が代入される。
		//* b3は「countが0より大きい場合」に"true"を代入するのだが、現在countは4なので"true"が代入される。
		System.out.println("b1 = " + b1 + ", b2 = " + b2 + ", b3 = " + b3);
		
		// 変数 b1 に、「n と sum が等しいかどうか」を比較演算子で比較した結果（論理値）を代入してください。
		
		/* 記入コード（４）*/
		b1 = (n == sum);
		
		// b1 が変化するか確認します。
    // B提出のコメントでは、b1、b2、b3の値の変化とその理由を説明してください。
		//* b1は、「nとsumの値が等しい場合」に"true"が代入されるが、現在nに4,sumに16なので"false"が代入される。
		//* b2, b3には変更されていない。
		System.out.println("b1 = " + b1 + ", b2 = " + b2 + ", b3 = " + b3);
		
		// if 文、while 文、 for 文などの条件部に書く式の値は boolean でなければいけません。
		if (n != 0) count = 0;
		
		// したがって、Cでは正しかった次のif 文はエラーになります。コメントをはずして確認してください。
		// (確認したら、もとに戻すこと。コンパイルエラーのあるうちは実行できません。）
		
		//if (n) count = 0;
		
		//ありがたいことに、Cでよくあった次の間違いも、コンパイルエラーになります。
		//理由は、 代入 n = 0 は、式としてはint型の値をもつので、条件部には不適だからです。
		
		//if (n = 0) count = 0;
		
		
		// 上の例でもわかるように、Java では、変数の宣言が随時できます。
		// 特に便利なのは、 for 文の初期化のところでも宣言できることです。
		
		count = 0;
		for (int i = 0; i < n; i++)
			if (i % 2 == 0) count++;
		
		// この例で、i という変数はこのfor文のなかだけで有効な変数になります。
		// これにならって、0 以上 n 未満の数のうちで、3 の倍数であるものの
		// 個数を 変数 count のなかに代入するコードを書いてください。
		// for 文の制御変数は、j を用いてください。
		
		/* 記入コード（５）*/
		count = 0;
		for(int j = 0; j < n; j++) {
			if(j % 3 == 0) count++;
		}
		
		//結果を確認します。
    // B提出のコメントでは、countの値がなぜ出力のようになるかを説明してください。
		//* 条件判定が「jを3で割ったあまりが0の時に、countを1足す」ということなので、これはすなわち「jが3の倍数の時に、countに1を足す」ということである。
		//* nが16なので、j(0 <= j < 16)はj = 0, 3, 6, 9, 12, 15の時にcountに1を追加するので6となる。
		System.out.println("count = " + count);
		// この課題はこれでお終いです。必ず実行して結果を確認してください。
	}
}
